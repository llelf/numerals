
module Data.Text.Defs.En where
import Data.Map
import Data.Text.Numerals.Types
rule = fromList [(0,[S "zero"]),(1,[S "one"]),(2,[S "two"]),(3,[S "three"]),(4,[S "four"]),(5,[S "five"]),(6,[S "six"]),(7,[S "seven"]),(8,[S "eight"]),(9,[S "nine"]),(10,[S "ten"]),(11,[S "eleven"]),(12,[S "twelve"]),(13,[S "thirteen"]),(14,[S "fourteen"]),(15,[S "fifteen"]),(16,[S "sixteen"]),(17,[S "seventeen"]),(18,[S "eighteen"]),(19,[S "nineteen"]),(20,[S "twenty",Possible [S "-",Fun Postfix]]),(30,[S "thirty",Possible [S "-",Fun Postfix]]),(40,[S "forty",Possible [S "-",Fun Postfix]]),(50,[S "fifty",Possible [S "-",Fun Postfix]]),(60,[S "sixty",Possible [S "-",Fun Postfix]]),(70,[S "seventy",Possible [S "-",Fun Postfix]]),(80,[S "eighty",Possible [S "-",Fun Postfix]]),(90,[S "ninety",Possible [S "-",Fun Postfix]]),(100,[Fun Prefix,S " hundred",Possible [S " ",Fun Postfix]]),(1000,[Fun Prefix,S " thousand",Possible [S " ",Fun Postfix]]),(1000000,[Fun Prefix,S " million",Possible [S " ",Fun Postfix]]),(1000000000,[Fun Prefix,S " billion",Possible [S " ",Fun Postfix]]),(1000000000000,[Fun Prefix,S " trillion",Possible [S " ",Fun Postfix]]),(1000000000000000,[Fun Prefix,S " quadrillion",Possible [S " ",Fun Postfix]]),(1000000000000000000,[Stop])]
