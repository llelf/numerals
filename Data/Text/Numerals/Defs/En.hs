
module Data.Text.Defs.En where
import Data.Map
import Data.Text.Numerals.Types
rule :: Rule
rule = Rule "en" (fromList [("2d-year",fromList [(0,[S "hundred"]),(1,[S "oh-",Replace (Alt "spellout-numbering")]),(10,[Replace (Alt "spellout-numbering")])]),("and",fromList [(1,[]),(100,[])]),("and-o",fromList [(0,[S "th"]),(1,[]),(100,[])]),("commas",fromList [(1,[]),(100,[]),(1000,[]),(1000000,[])]),("commas-o",fromList [(0,[S "th"]),(1,[]),(100,[]),(1000,[]),(1000000,[])]),("spellout-cardinal",fromList [(0,[S "zero"]),(1,[S "one"]),(2,[S "two"]),(3,[S "three"]),(4,[S "four"]),(5,[S "five"]),(6,[S "six"]),(7,[S "seven"]),(8,[S "eight"]),(9,[S "nine"]),(10,[S "ten"]),(11,[S "eleven"]),(12,[S "twelve"]),(13,[S "thirteen"]),(14,[S "fourteen"]),(15,[S "fifteen"]),(16,[S "sixteen"]),(17,[S "seventeen"]),(18,[S "eighteen"]),(19,[S "nineteen"]),(20,[S "twenty",Possible [S "-",Fun Postfix Default]]),(30,[S "thirty",Possible [S "-",Fun Postfix Default]]),(40,[S "forty",Possible [S "-",Fun Postfix Default]]),(50,[S "fifty",Possible [S "-",Fun Postfix Default]]),(60,[S "sixty",Possible [S "-",Fun Postfix Default]]),(70,[S "seventy",Possible [S "-",Fun Postfix Default]]),(80,[S "eighty",Possible [S "-",Fun Postfix Default]]),(90,[S "ninety",Possible [S "-",Fun Postfix Default]]),(100,[Fun Prefix Default,S " hundred",Possible [S " ",Fun Postfix Default]]),(1000,[Fun Prefix Default,S " thousand",Possible [S " ",Fun Postfix Default]]),(1000000,[Fun Prefix Default,S " million",Possible [S " ",Fun Postfix Default]]),(1000000000,[Fun Prefix Default,S " billion",Possible [S " ",Fun Postfix Default]]),(1000000000000,[Fun Prefix Default,S " trillion",Possible [S " ",Fun Postfix Default]]),(1000000000000000,[Fun Prefix Default,S " quadrillion",Possible [S " ",Fun Postfix Default]]),(1000000000000000000,[Stop])]),("spellout-cardinal-verbose",fromList [(0,[Replace (Alt "spellout-numbering")]),(100,[Fun Prefix Default,S " hundred",Possible [Fun Postfix (Alt "and")]]),(1000,[Fun Prefix Default,S " thousand",Possible [Fun Postfix (Alt "and")]]),(100000,[Fun Prefix Default,S " thousand",Possible [Fun Postfix (Alt "commas")]]),(1000000,[Fun Prefix Default,S " million",Possible [Fun Postfix (Alt "commas")]]),(1000000000,[Fun Prefix Default,S " billion",Possible [Fun Postfix (Alt "commas")]]),(1000000000000,[Fun Prefix Default,S " trillion",Possible [Fun Postfix (Alt "commas")]]),(1000000000000000,[Fun Prefix Default,S " quadrillion",Possible [Fun Postfix (Alt "commas")]]),(1000000000000000000,[Stop])]),("spellout-numbering",fromList [(0,[Replace (Alt "spellout-cardinal")])]),("spellout-numbering-verbose",fromList [(0,[Replace (Alt "spellout-cardinal-verbose")])]),("spellout-numbering-year",fromList [(0,[Replace (Alt "spellout-numbering")]),(1010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(1100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(2000,[Replace (Alt "spellout-numbering")]),(2010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(2100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(3000,[Replace (Alt "spellout-numbering")]),(3010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(3100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(4000,[Replace (Alt "spellout-numbering")]),(4010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(4100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(5000,[Replace (Alt "spellout-numbering")]),(5010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(5100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(6000,[Replace (Alt "spellout-numbering")]),(6010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(6100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(7000,[Replace (Alt "spellout-numbering")]),(7010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(7100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(8000,[Replace (Alt "spellout-numbering")]),(8010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(8100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(9000,[Replace (Alt "spellout-numbering")]),(9010,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(9100,[Fun Prefix Default,S " ",Fun Postfix (Alt "2d-year")]),(10000,[Replace (Alt "spellout-numbering")])]),("spellout-ordinal-verbose",fromList [(0,[Replace (Alt "spellout-ordinal")]),(100,[Fun Prefix (Alt "spellout-numbering-verbose"),S " hundred",Fun Postfix (Alt "and-o")]),(1000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " thousand",Fun Postfix (Alt "and-o")]),(100000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " thousand",Fun Postfix (Alt "commas-o")]),(1000000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " million",Fun Postfix (Alt "commas-o")]),(1000000000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " billion",Fun Postfix (Alt "commas-o")]),(1000000000000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " trillion",Fun Postfix (Alt "commas-o")]),(1000000000000000,[Fun Prefix (Alt "spellout-numbering-verbose"),S " quadrillion",Fun Postfix (Alt "commas-o")]),(1000000000000000000,[Stop])]),("th",fromList [(0,[S "th"]),(1,[])]),("tieth",fromList [(0,[S "tieth"]),(1,[S "ty-",Replace (Alt "spellout-ordinal")])])])
